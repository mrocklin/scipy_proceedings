:author: Mark Wiebe
:email: mwiebe@continuum.io
:institution: Continuum Analytics

:author: Andy Terrel
:email: aterrel@continuum.io
:institution: Continuum Analytics

:author: Matthew Rocklin
:email: mrocklin@continuum.io
:institution: Continuum Analytics

:author: TJ Alumbaugh
:email: tj.alumbaugh@continuum.io
:institution: Continuum Analytics

-------------------------------------------------------------------
Blaze: Building A Foundation for Array-Oriented Computing in Python
-------------------------------------------------------------------

.. class:: abstract

Python’s scientific computing and data analysis ecosystem, built around NumPy, SciPy, Matplotlib, Pandas, and a host of other libraries, is a tremendous success. NumPy provides an array object, the array-oriented ufunc primitive, and standard practices for exposing and writing numerical libraries to Python all of which have assisted in making it a solid foundation for the community. Over time, however, it has become clear that there are some limitations of NumPy that are difficult to address via evolution from within. Notably, the way NumPy arrays are restricted to data with regularly strided memory structure on a single machine is not easy to change.

Blaze is a project being built with the goal of addressing these limitations, and becoming a foundation to grow Python’s success in array-oriented computing long into the future. It consists of a small collection of libraries being built to generalize NumPy’s notions of array, dtype, and ufuncs to be more extensible, and to represent data and computation that is distributed or does not fit in main memory.

Datashape is the array type system that describes the structure of data, including a specification of a grammar and set of basic types, and a library for working with them. LibDyND is an in-memory array programming library, written in C++ and exposed to Python to provide the local representation of memory supporting the datashape array types. BLZ is a chunked column-oriented persistence storage format for storing Blaze data, well-suited for out of core computations. Finally, the Blaze library ties these components together with a deferred execution graph and execution engine, which can analyze desired computations together with the location and size of input data, and carry out an execution plan in memory, out of core, or in a distributed fashion as is needed.


.. class:: keywords

   array programming, big data, numpy, scipy, pandas

Introduction
------------

* History of array-oriented programming, leading up to NumPy/SciPy/Pandas.

* Growth of data analysis outside of the Python world: Hadoop, R, Julia, etc.

* Describe the data structures (array, relational table, data frame)
  being used in different fields (scientific computing, statistical analysis,
  data mining)

* Blaze aims to define and implement some generic abstractions for
  array-oriented programming on top of systems implementing these data
  structures, and provide glue to transform data between them.

Blaze Architecture
------------------

* Motivation is to write analysis code once, be able to operate on data from
  many sources and run on many backends.

* Functional-style programming to map well onto multi-core and distributed
  systems.

Blaze Data
~~~~~~~~~~

* Defines interface for reading/writing data describable with datashape.

* Brief description description of datashape as combination of shape and
  dtype from NumPy, plus more general dimensions and additional dtypes.

* Two mechanisms to stream data: as Python objects, and higher performance
  via DyND array chunks.

* Plugin mechanism to define new data formats.

* LibDyND subsection describing how its implementation of in-memory datashaped
  data provides glue for efficient chunked iteration, converting types, etc.

Blaze Expr
~~~~~~~~~~

* Abstract expression tree representation, generated by the Table and
  Array objects or created/manipulated directly.

* Represents computations commonly done via SQL, NumPy, Pandas, etc.

Blaze Compute
~~~~~~~~~~~~~

* Maps blaze expression trees to backends.

* Accounts for differences in naming of similar computations.

* Multiple dispatch mechanism to connect to new backends.

Blaze Interface
~~~~~~~~~~~~~~~

* Table and Array objects with pandas/numpy-like interfaces, to provide
  friendly interfaces for domain experts whose primary focus is not programming.

Experiment
----------

* Sample analysis, develop in Python compute layer, run on SQLLite,
  Pandas, Spark.

* Chart showing performance vs data size, plotting the performance lines
  of each backend together.

Conclusion
----------


.. Customised LaTeX packages
.. -------------------------

.. Please avoid using this feature, unless agreed upon with the
.. proceedings editors.

.. ::

..   .. latex::
..      :usepackage: somepackage

..      Some custom LaTeX source here.

References
----------
.. [Atr03] P. Atreides. *How to catch a sandworm*,
           Transactions on Terraforming, 21(3):261-300, August 2003.


